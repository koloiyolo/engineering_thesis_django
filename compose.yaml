
services:

  db:
    container_name: db_logging
    restart: always
    image: mysql:8.0
    ports:
      - 3306:3306
    env_file:
      - config.env
    volumes: 
      - ./db:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5

  phpmyadmin:
    container_name: phpmyadmin_logging
    restart: always
    image: phpmyadmin:latest
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 8081:80

  syslog-ng:
    container_name: syslog-ng
    restart: always
    depends_on:
      db:
        condition: service_healthy
    build: ./syslog-ng
    ports:
      - 5014:514/udp
      - 6001:601
    env_file:
      - config.env
    volumes:
      - ./logs:/var/log

  redis:
    container_name: redis_logging
    image: redis:7.2.5
    restart: always
    ports:
      - "6379:6379"
    env_file:
      - config.env
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  migration:
    build: "./logging_system"
    command: python manage.py migrate --noinput
    volumes:
      - ./logging_system:/app
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - config.env

  logging_system:
    container_name: logging_system
    restart: always
    depends_on:
      migration:
        condition: service_started
      db:
        condition: service_healthy
    build: "./logging_system"
    command: python manage.py runserver 0.0.0.0:80
    volumes:
      - ./logging_system:/app
    ports:
      - "80:80"
    env_file:
      - config.env
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail http://localhost/health/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  celery:
    build: "./logging_system"
    command: celery -A logging_system worker -l info
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      logging_system:
        condition: service_healthy
    env_file:
      - config.env

  celery-beat:
    build: "./logging_system"
    command: celery -A logging_system beat -l info
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      logging_system:
        condition: service_healthy
    env_file:
      - config.env
